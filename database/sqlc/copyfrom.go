// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: copyfrom.go

package goAPI

import (
	"context"
)

// iteratorForInsertPeople implements pgx.CopyFromSource.
type iteratorForInsertPeople struct {
	rows                 []InsertPeopleParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertPeople) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertPeople) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Surname,
		r.rows[0].Name,
		r.rows[0].Patronymic,
		r.rows[0].Address,
		r.rows[0].PassportSerie,
		r.rows[0].PassportNumber,
	}, nil
}

func (r iteratorForInsertPeople) Err() error {
	return nil
}

func (q *Queries) InsertPeople(ctx context.Context, arg []InsertPeopleParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"people"}, []string{"surname", "name", "patronymic", "address", "passport_serie", "passport_number"}, &iteratorForInsertPeople{rows: arg})
}

// iteratorForInsertTasks implements pgx.CopyFromSource.
type iteratorForInsertTasks struct {
	rows                 []InsertTasksParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertTasks) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertTasks) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].PeopleID,
		r.rows[0].Name,
		r.rows[0].StartTime,
		r.rows[0].EndTime,
	}, nil
}

func (r iteratorForInsertTasks) Err() error {
	return nil
}

func (q *Queries) InsertTasks(ctx context.Context, arg []InsertTasksParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"tasks"}, []string{"people_id", "name", "start_time", "end_time"}, &iteratorForInsertTasks{rows: arg})
}
